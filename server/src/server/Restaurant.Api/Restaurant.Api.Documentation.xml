<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Restaurant.Api</name>
    </assembly>
    <members>
        <member name="M:Restaurant.Api.Controllers.AuthController.AllUserAccounts">
            <summary>
            Fetches all user accounts.
            </summary>
            <returns>Collection of <see cref="T:Restaurant.Domain.Views.Auth.UserView"/></returns>
        </member>
        <member name="M:Restaurant.Api.Controllers.AuthController.Login(Restaurant.Core.AuthContext.Commands.Login)">
            <summary>
            Login.
            </summary>
            <param name="command">The credentials.</param>
            <returns>A JWT.</returns>
            <response code="200">If the credentials have a match.</response>
            <response code="400">If the credentials don't match/don't meet the requirements.</response>
        </member>
        <member name="M:Restaurant.Api.Controllers.AuthController.Register(Restaurant.Core.AuthContext.Commands.Register)">
            <summary>
            Register.
            </summary>
            <param name="command">The user model.</param>
            <returns>A user model.</returns>
            <response code="201">A user was created.</response>
            <response code="400">Invalid input.</response>
        </member>
        <member name="M:Restaurant.Api.Controllers.MealsController.RegisterMeal(Restaurant.Core.MealContext.HttpRequests.RegisterMealRequest)">
            <summary>
            Creates a new meal and publishes an event.
            </summary>
            <response code="201">If the request passes the validations.</response>
            <response code="400">If meal type does not exist.</response>
            <response code="401">If current user is not the restaurant owner.</response>
            <response code="404">If restaurant with current ID does not exist.</response>
        </member>
        <member name="M:Restaurant.Api.Controllers.MealsController.MakeOrder(System.String,Restaurant.Core.OrderContext.HttpRequests.MakeOrderRequest)">
            <summary>
            TODO
            </summary>
            <param name="id"></param>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Restaurant.Api.Controllers.OptionController.Get(Restaurant.Api.Controllers.OptionController.ParametersDemo)">
            <summary>
            Demonstrates the Option model binding with query string parameters.
            </summary>
            <param name="request">The request object.</param>
            <returns>A model showing the bound data.</returns>
            <response code="200">The model was bound successfully.</response>
            <response code="400">When it could not parse some of the inputted data.</response>
        </member>
        <member name="T:Restaurant.Api.Controllers.OptionController.ParametersDemo">
            <summary>
            This class is for demonstration purposes.
            The optional values need to be put in as class properties in order
            for Swagger to be able to display them properly. There is nothing wrong with
            having something like Get([FromQuery] Option&lt;string&gt; text), it's going to work,
            it's just that it will not be properly displayed in the Swagger UI.
            </summary>
        </member>
        <member name="M:Restaurant.Api.Controllers.ReportsController.GenerateUserLoginReport">
            <summary>
            TODO
            </summary>
            <returns></returns>
        </member>
        <member name="M:Restaurant.Api.Controllers.RestaurantsController.GetRestaurantsByTown(Restaurant.Core.RestaurantContext.Queries.GetAllRestaurantsByTown)">
            <summary>
            Returns all restaurants by town id, ordered by rating.
            </summary>
            <param name="query">Town ID GUID.</param>
            <returns>ID, name, average rating and town.</returns>
        </member>
        <member name="M:Restaurant.Api.Controllers.RestaurantsController.RegisterRestaurant(Restaurant.Core.RestaurantContext.HttpRequests.RegisterRestaurantRequest)">
            POST: api/restaurants/register
            <summary>
            Creates a new restaurant and publishes an `RegisterRestaurant` event. 
            </summary>
            <response code="201">If the request passes the validations.</response>
            <response code="400">If town with current ID does not exist.</response>
            <response code="409">If restaurant with current name and town already exist.</response>
        </member>
        <member name="M:Restaurant.Api.Controllers.RestaurantsController.RateRestaurant(System.String,Restaurant.Core.RatingContext.HttpRequests.RateRestaurantRequest)">
            POST: api/restaurants/{restaurantId}/rate
            <summary>
            Rates an existing restaurant.
            An user may only give one rating per restaurant.
            If he rates twice, the old rating is overridden with the new value.
            Also publishes an `RestaurantRated` event.
            </summary>
            <param name="id">Restaurant ID.</param>
            <param name="request">Stars rate.</param>
            <response code="200">If the request passes the validations.</response>
            <response code="404"> If restaurant with current ID does not exist </response>
            <response code="400"> If user is trying to rate he/her's own restaurant. </response>
        </member>
        <member name="M:Restaurant.Api.Controllers._Base.ApiController.Ok(MediatR.Unit)">
            <summary>
            Enables using method groups when matching on Unit.
            </summary>
        </member>
        <member name="T:Restaurant.Api.Middlewares.LogMiddleware">
            <summary>
            Middleware that logs each request and some other info such as IP addresses to the database.
            </summary>
        </member>
        <member name="T:Restaurant.Api.OperationFilters.OptionOperationFilter">
            <summary>
            This operation filter only works on <see cref="T:Optional.Option"/> types that are contained in a class.
            Optional values that are put as type parameters will not be properly displayed in Swagger, although they will work.
            </summary>
        </member>
        <member name="M:Restaurant.Api.Program.BuildWebHost(System.String[])">
            <summary>
            To be used by EF tooling until I implement IDesignTimeDbContextFactory.
            https://wildermuth.com/2017/07/06/Program-cs-in-ASP-NET-Core-2-0
            </summary>
        </member>
    </members>
</doc>
